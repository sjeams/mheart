// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        imgColor: {value: [255,0,255,255] ,editor: {type: color} }
        radius: { value: 0.01 }
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;
  
  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform color{
    vec4 imgColor;
  };

  uniform Properties {
    float radius;
  };
 
  void main () {
    vec4 accum = vec4(0.0);
    vec4 normal = vec4(0.0);
     
    //纹理查询，从texture提取指定坐标的颜色信息normal，相当于一张正常的图片,normal就是原图
    normal = texture2D(texture, vec2(v_uv0.x, v_uv0.y));

    //纹理查询，相当于获取了一张比原图比例大radius的图片，accum就是描边图
    accum += texture2D(texture, vec2(v_uv0.x - radius, v_uv0.y - radius));
    accum += texture2D(texture, vec2(v_uv0.x + radius, v_uv0.y - radius));
    accum += texture2D(texture, vec2(v_uv0.x + radius, v_uv0.y + radius));
    accum += texture2D(texture, vec2(v_uv0.x - radius, v_uv0.y + radius));

    //将描边图设置为imgColor色，例如imgColor是红色，则描边图就是红色
    accum.r = imgColor.r * accum.a;
    accum.g = imgColor.g * accum.a;
    accum.b = imgColor.b * accum.a;
    accum.a = imgColor.a * accum.a;

    //accum * (1.0- normal.a)相当于描边图和原图重叠的地方都为透明，这样只剩下描边
    //normal 还是原图
    //accum * (1.0- normal.a) + normal 就是描边+原图了
    normal = accum * (1.0- normal.a) + normal;

    ALPHA_TEST(normal);
    
    gl_FragColor = normal*v_color;
  }
}%
