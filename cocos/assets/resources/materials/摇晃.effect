// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        imgColor: {value: [255,0,255,255] ,editor: {type: color,tooltip: '描边颜色' } }
        radius: { value: 0.01, editor: { tooltip: '描边宽度' }}
        u_time: { value: 0.01, editor: { tooltip: '描边宽度' }}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;
  in vec2 v_texCoord;


  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform color{
    vec4 imgColor;
  };
  
  uniform Properties {
    float radius;
    float u_time;
  };


  void main () {
    //1秒行动次数
    // float u_time = mod(cc_time.x,u_time);
    vec4 o = vec4(1, 1, 1, 1);
    //获取v_uv0这个点的高度
    // float height = 1.0 - v_uv0.y;
    float height =  0.2 - v_uv0.y; //晃动距离
    //使用pow函数，让越高的地方摆动幅度越明显且成抛物线形态
    float k = 0.16*pow(height, 2.0);
    //x轴偏移量，使用sin函数实现两边摆动效果，u_time*2.0是为了加快摆动
    float offset = k*sin(u_time*2.0);
 
    #if USE_TEXTURE
    //fract函数是GLSL内建函数，取小数部分
    o *= texture(texture, fract(vec2(v_uv0.x + offset, v_uv0.y)));
      #if CC_USE_ALPHA_ATLAS_TEXTURE
      o.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;
      #endif
    #endif
    o *= v_color; 
    ALPHA_TEST(o);
    gl_FragColor = o;    
  }
}%