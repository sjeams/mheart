// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.  

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        imgColor: {value: [255,0,255,255] ,editor: {type: color,tooltip: '描边颜色' } }
        radius: { value: 0.01, editor: { tooltip: '描边宽度' }}
}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%

CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>
  #include <cc-global>

  in vec4 v_color;
  in vec2 v_texCoord;


  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  #endif

  uniform color{
    vec4 imgColor;
  };
  
  uniform Properties {
    float radius;
  };
  void main () {

    //颜色--自定义
    vec4  color = vec4(1, 1, 1, 1)*imgColor;
    // vec4  color =  imgColor;
    #if USE_TEXTURE
      CCTexture(texture, v_uv0, color);
    #endif

    // 上下偏移图片
    float time = mod(cc_time.x, 1.0);
    float speed = 0.05;
    float offsetY = fract(time * speed);
    // 上下    
    vec2 curUv = v_uv0 - vec2(0.0, offsetY);
    vec2 othUv = v_uv0 - vec2(0.0, offsetY - 1.0);
    //左右
    // vec2 curUv = v_uv0 - vec2( offsetY,0.0);
    // vec2 othUv = v_uv0 - vec2( offsetY - 1.0,0.0);

    vec4 cur = texture2D(texture, curUv);
    vec4 oth = texture2D(texture, othUv);
    vec4 move = oth + cur;
    //闪烁
    float ablank = abs(sin(time*0.2));
    //描边
    // // 计算周围像素的 alpha 值
    // float alphaLeft = texture2D(texture, v_uv0 + vec2(radius, 0)).a;
    // float alphaRight = texture2D(texture, v_uv0 - vec2(radius, 0)).a;
    // float alphaTop = texture2D(texture, v_uv0 + vec2(0, radius)).a;
    // float alphaBottom = texture2D(texture, v_uv0 - vec2(0, radius)).a;
    // 计算描边的 alpha 值

    // float finalColor= alphaLeft + alphaRight + alphaTop + alphaBottom;
    float finalColor= color.a;

    ///渐变
    vec4  j_color = vec4(v_uv0.x*color.r,v_uv0.y*color.g,color.b,finalColor);

    //水波纹
    // float distortionStrength = 0.001; // 控制水波的强度
    // float n_time = time*0.001; // 水波的移动速度
    // vec2 distortedUV = v_uv0 + texture2D(texture, v_uv0).rg * distortionStrength;
    // vec4 bowen = texture2D(texture, distortedUV - vec2(0.0,n_time));
    // gl_FragColor =move*+ablank+j_color; 
    gl_FragColor =j_color+ablank*+move;  
 
  }
}%