{
  "ver": "1.0.25",
  "uuid": "35f59565-0b1e-4a57-9d59-06600234c298",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_texCoord;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 imgColor;\nvoid main () {\n  vec4  color = vec4(1, 1, 1, 1)*imgColor;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture2D(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture2D(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  #endif\n  float time = mod(cc_time.x, 1.0);\n  float speed = 0.05;\n  float offsetY = fract(time * speed);\n  vec2 curUv = v_uv0 - vec2(0.0, offsetY);\n  vec2 othUv = v_uv0 - vec2(0.0, offsetY - 1.0);\n  vec4 cur = texture2D(texture, curUv);\n  vec4 oth = texture2D(texture, othUv);\n  vec4 move = oth + cur;\n  float ablank = abs(sin(time*0.2));\n  float finalColor= color.a;\n  vec4  j_color = vec4(v_uv0.x*color.r,v_uv0.y*color.g,color.b,finalColor);\n  gl_FragColor =j_color+ablank*+move;\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\nin vec2 v_texCoord;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform color{\n  vec4 imgColor;\n};\nuniform Properties {\n  float radius;\n};\nvoid main () {\n  vec4  color = vec4(1, 1, 1, 1)*imgColor;\n  #if USE_TEXTURE\n  vec4 texture_tmp = texture(texture, v_uv0);\n  #if CC_USE_ALPHA_ATLAS_texture\n      texture_tmp.a *= texture(texture, v_uv0 + vec2(0, 0.5)).r;\n  #endif\n  #if INPUT_IS_GAMMA\n    color.rgb *= (texture_tmp.rgb * texture_tmp.rgb);\n    color.a *= texture_tmp.a;\n  #else\n    color *= texture_tmp;\n  #endif\n  #endif\n  float time = mod(cc_time.x, 1.0);\n  float speed = 0.05;\n  float offsetY = fract(time * speed);\n  vec2 curUv = v_uv0 - vec2(0.0, offsetY);\n  vec2 othUv = v_uv0 - vec2(0.0, offsetY - 1.0);\n  vec4 cur = texture2D(texture, curUv);\n  vec4 oth = texture2D(texture, othUv);\n  vec4 move = oth + cur;\n  float ablank = abs(sin(time*0.2));\n  float finalColor= color.a;\n  vec4  j_color = vec4(v_uv0.x*color.r,v_uv0.y*color.g,color.b,finalColor);\n  gl_FragColor =j_color+ablank*+move;\n}"
      }
    }
  ],
  "subMetas": {}
}